dialect "mvel"

import java.util.List;
import java.time.LocalDateTime;
import org.slf4j.Logger;

import com.example.siemcenter.common.models.Device;
import com.example.siemcenter.common.repositories.DeviceRepository;
import com.example.siemcenter.common.models.FactStatus;
import com.example.siemcenter.alarms.models.Alarm;
import com.example.siemcenter.alarms.repositories.AlarmRepository;
import com.example.siemcenter.logs.models.Log;
import com.example.siemcenter.logs.models.LogType;
import com.example.siemcenter.users.models.User;
import com.example.siemcenter.users.repositories.UserRepository;

global Logger logger;
global DeviceRepository deviceRepository;
global AlarmRepository alarmRepository;
global UserRepository userRepository;


declare AlarmPriority
    priority: Number
    alarm: Alarm
    cause: String
end

rule "#14 Brute force is detected on a login system" salience 5
    when
        $log: Log(message.toLowerCase() contains "login"
                  || message.toLowerCase() contains "log in"
                  || message.toLowerCase() contains "log-in"
             )
        $logs: List(size >= 50) from collect (
            Log(message.toLowerCase() contains "login"
                || message.toLowerCase() contains "log in"
                || message.toLowerCase() contains "log-in"
            ) over window:time(60s)
        )
    then
        Alarm $newAlarm = new Alarm();
        $newAlarm.setMessage("Brute force is detected on a login system");
        $newAlarm.setFactStatus(FactStatus.ACTIVE);
        $newAlarm.setRuleTriggered("#14 Brute force is detected on a login system");
        $newAlarm.setTimestamp(LocalDateTime.now());

        $newAlarm.setIpAddress($log.getDevice().getIpAddress());
        $newAlarm.setOs($log.getOs().getName());
        $newAlarm.getRelatedLogs().add($log);
        $newAlarm.getRelatedUsers().add($log.getUser());

        AlarmPriority $alarmPriority = new AlarmPriority(5 * $logs.size(), $newAlarm, "Brute force is detected on a login system");
        insert($alarmPriority);
end

rule "#13 DDoS attack that is targeting payment system triggers payment alarm" salience 5
    when
        $log: Log(message.toLowerCase() contains "payment"
                  || message.toLowerCase() contains "pay"
                  || message.toLowerCase() contains "money"
                  || message.toLowerCase() contains "cash"
                  || message.toLowerCase() contains "credit card"
              )
        $logs: List(size >= 50) from collect (
            Log(message.toLowerCase() contains "payment"
                || message.toLowerCase() contains "pay"
                || message.toLowerCase() contains "money"
                || message.toLowerCase() contains "cash"
                || message.toLowerCase() contains "credit card"
            ) over window:time(60s)
        )
    then
        Alarm $newAlarm = new Alarm();
        $newAlarm.setMessage("DDoS attack regarding payment system");
        $newAlarm.setFactStatus(FactStatus.ACTIVE);
        $newAlarm.setRuleTriggered("#13 DDoS attack that is targeting payment system triggers payment alarm");
        $newAlarm.setTimestamp(LocalDateTime.now());

        $newAlarm.setIpAddress($log.getDevice().getIpAddress());
        $newAlarm.setOs($log.getOs().getName());
        $newAlarm.getRelatedLogs().add($log);
        $newAlarm.getRelatedUsers().add($log.getUser());

        AlarmPriority $alarmPriority = new AlarmPriority(3 * $logs.size(), $newAlarm, "DDoS attack regarding payment system");
        insert($alarmPriority);
end

rule "#12 DDoS attack is detected if system receives 50 or more request in 60 seconds" salience 5
    when
        $log: Log()
        $logs: List(size >= 50) from collect(
            Log() over window:time(60s)
        )
    then
        Alarm $newAlarm = new Alarm();
        $newAlarm.setMessage("Distributed Denial of Service Attack");
        $newAlarm.setFactStatus(FactStatus.ACTIVE);
        $newAlarm.setRuleTriggered("#12 DDoS attack is detected if system receives 50 or more request in 60 seconds");
        $newAlarm.setTimestamp(LocalDateTime.now());

        $newAlarm.setIpAddress($log.getDevice().getIpAddress());
        $newAlarm.setOs($log.getOs().getName());
        $newAlarm.getRelatedLogs().add($log);
        $newAlarm.getRelatedUsers().add($log.getUser());

        AlarmPriority $alarmPriority = new AlarmPriority(1 * $logs.size(), $newAlarm, "Distributed Denial of Service Attack");
        insert($alarmPriority);
end


// Only alarm with highest priority should trigger (1*DDoS || 3*payment || 5*BruteForce)
rule "Prioritizing DDoS < Payment < BruteForce" salience 3
    when
        $ap: AlarmPriority($p: priority)
        not (AlarmPriority(priority > $p))
        not (Alarm(message==$ap.getCause(),
                   timestamp.isAfter(LocalDateTime.now().minusMinutes(1)))
         )
    then
        alarmRepository.save($ap.getAlarm());
        insert($ap.getAlarm());
        logger.info($ap.getCause() + " Alarm with priority " + $p + " inserted!");
        //delete($ap);
end
